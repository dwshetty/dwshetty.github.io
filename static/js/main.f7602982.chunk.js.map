{"version":3,"sources":["components/Loading/styles.module.scss","components/Header/index.tsx","components/Footer/index.tsx","modules/Main/index.tsx","components/Loading/index.tsx","modules/Routes.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["module","exports","HoverMenu","lazy","SideNavMenu","Header","useState","showSidenav","setShowSidenav","toggleSideNav","useCallback","prevShowSidenav","to","exact","className","role","tabIndex","id","fallback","type","onClick","Footer","Date","getFullYear","Main","children","Loading","styles","wrapper","Home","About","Work","Contact","NoMatch","Routes","path","component","ScrollToTop","App","Boolean","window","location","hostname","match","AppRoot","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,uB,2MCIvDC,EAAYC,gBAChB,kBAAM,4BAAN,IAEIC,EAAcD,gBAClB,kBAAM,4BAAN,IAqDaE,MAlDf,WACE,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAgBC,uBAAY,WAChCF,GAAe,SAACG,GAAD,OAAsBA,CAAtB,GAChB,GAAE,IAEH,OACE,mCACE,8BACE,cAAC,IAAD,CAASC,GAAG,IAAIC,OAAK,EAArB,SACE,gDAGJ,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,UACf,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,SAAf,UACE,wBACA,wBACA,wBACA,6BAGJ,qBAAKA,UAAU,aAEjB,sBAAKA,UAAU,OAAOC,KAAK,SAASC,SAAU,EAA9C,UACE,sBAAKF,UAAU,UAAf,UACE,sBAAMG,GAAG,OAAT,kBACA,sBAAMF,KAAK,SAAS,kBAAgB,YAEtC,cAAC,WAAD,CAAUG,SAAU,6BAApB,SACE,cAAChB,EAAD,SAGJ,sBAAKY,UAAU,UAAf,UACE,wBAAQK,KAAK,SAASC,QAASX,EAA/B,oBAGA,cAAC,WAAD,CAAUS,SAAU,6BAApB,SACE,cAACd,EAAD,CACEG,YAAaA,EACbE,cAAeA,WAM1B,E,MC/CcY,MAXf,WACE,OACE,mCACE,iDADF,OAEE,mBAAGP,UAAU,iBAFf,OAIE,gCAAO,IAAIQ,MAAOC,kBAGvB,E,MCMcC,MAVf,YAAwE,IAAxDC,EAAuD,EAAvDA,SACd,OACE,qCACE,cAAC,EAAD,IACA,+BAAOA,IACP,cAAC,EAAD,MAGL,E,wBCJcC,MATf,WACE,OACE,sBAAKZ,UAAWa,IAAOC,QAAvB,UACE,wBACA,0BAGL,ECLKC,EAAO1B,gBAAK,kBAAM,kDAAN,IACZ2B,EAAQ3B,gBACZ,kBAAM,kDAAN,IAEI4B,EAAO5B,gBAAK,kBAAM,kDAAN,IACZ6B,EAAU7B,gBACd,kBAAM,kDAAN,IAEI8B,EAAU9B,gBACd,kBAAM,kDAAN,IAiBa+B,MAdf,WACE,OACE,cAAC,WAAD,CAAUhB,SAAU,cAAC,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOL,OAAK,EAACsB,KAAK,IAAIC,UAAWP,IACjC,cAAC,IAAD,CAAOM,KAAK,SAASC,UAAWN,IAChC,cAAC,IAAD,CAAOK,KAAK,QAAQC,UAAWL,IAC/B,cAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,IAClC,cAAC,IAAD,CAAOI,UAAWH,QAIzB,ECpBKI,G,MAAclC,gBAClB,kBAAM,4BAAN,KAgBamC,MAbf,WACE,OACE,eAAC,IAAD,WACE,cAAC,WAAD,CAAUpB,SAAU,6BAApB,SACE,cAACmB,EAAD,MAEF,cAAC,EAAD,UACE,cAAC,EAAD,QAIP,ECVmBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAU,kBACd,cAAC,aAAD,UACE,cAAC,EAAD,KAFY,EAKVC,EAAcC,SAASC,eAAe,QAExCF,EAAaG,gBACfC,kBAAQ,cAAC,EAAD,IAAaJ,GAErBK,iBAAO,cAAC,EAAD,IAAaL,GDyHhB,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,YACd,IACAC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,QACrB,G","file":"static/js/main.f7602982.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__JDynD\",\"ripple\":\"styles_ripple__3xGLI\"};","import { NavLink } from \"react-router-dom\";\nimport { lazy, Suspense, useState, useCallback } from \"react\";\n\nimport \"./styles.scss\";\n\nconst HoverMenu = lazy(\n  () => import(/* webpackChunkName: \"HoverMenu\" */ \"./HoverMenu\")\n);\nconst SideNavMenu = lazy(\n  () => import(/* webpackChunkName: \"SideNavMenu\" */ \"./SideNavMenu\")\n);\n\nfunction Header(): JSX.Element {\n  const [showSidenav, setShowSidenav] = useState(false);\n\n  const toggleSideNav = useCallback(() => {\n    setShowSidenav((prevShowSidenav) => !prevShowSidenav);\n  }, []);\n\n  return (\n    <header>\n      <nav>\n        <NavLink to=\"/\" exact>\n          <code>dwshetty</code>\n        </NavLink>\n      </nav>\n      <div className=\"flag\">\n        <div className=\"first\" />\n        <div className=\"second\">\n          <div className=\"chakra\">\n            <div />\n            <div />\n            <div />\n            <div />\n          </div>\n        </div>\n        <div className=\"third\" />\n      </div>\n      <div className=\"menu\" role=\"button\" tabIndex={0}>\n        <div className=\"wrapper\">\n          <span id=\"menu\">Menu</span>\n          <span role=\"button\" aria-labelledby=\"menu\" />\n        </div>\n        <Suspense fallback={<></>}>\n          <HoverMenu />\n        </Suspense>\n      </div>\n      <div className=\"sidenav\">\n        <button type=\"button\" onClick={toggleSideNav}>\n          &#9776;\n        </button>\n        <Suspense fallback={<></>}>\n          <SideNavMenu\n            showSidenav={showSidenav}\n            toggleSideNav={toggleSideNav}\n          />\n        </Suspense>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import \"./styles.scss\";\n\nfunction Footer(): JSX.Element {\n  return (\n    <footer>\n      <span>Made in India</span>&nbsp;\n      <i className=\"fas fa-heart\" />\n      &nbsp;\n      <span>{new Date().getFullYear()}</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { PropsWithChildren, ReactNode } from \"react\";\n\nimport Header from \"components/Header\";\nimport Footer from \"components/Footer\";\n\nimport \"./styles.scss\";\n\nfunction Main({ children }: PropsWithChildren<ReactNode>): JSX.Element {\n  return (\n    <>\n      <Header />\n      <main>{children}</main>\n      <Footer />\n    </>\n  );\n}\n\nexport default Main;\n","import styles from \"./styles.module.scss\";\n\nfunction Loading(): JSX.Element {\n  return (\n    <div className={styles.wrapper}>\n      <div />\n      <div />\n    </div>\n  );\n}\n\nexport default Loading;\n","import { lazy, Suspense } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Loading from \"components/Loading\";\n\nconst Home = lazy(() => import(/* webpackChunkName: \"Home\" */ \"routes/Home\"));\nconst About = lazy(\n  () => import(/* webpackChunkName: \"About\" */ \"routes/About\")\n);\nconst Work = lazy(() => import(/* webpackChunkName: \"Work\" */ \"routes/Work\"));\nconst Contact = lazy(\n  () => import(/* webpackChunkName: \"Contact\" */ \"routes/Contact\")\n);\nconst NoMatch = lazy(\n  () => import(/* webpackChunkName: \"NoMatch\" */ \"routes/NoMatch\")\n);\n\nfunction Routes(): JSX.Element {\n  return (\n    <Suspense fallback={<Loading />}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/work\" component={Work} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route component={NoMatch} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import { lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Main from \"modules/Main\";\nimport Routes from \"modules/Routes\";\n\nimport \"./App.css\";\n\nconst ScrollToTop = lazy(\n  () => import(/* webpackChunkName: \"ScrollToTop\" */ \"shared/ScrollToTop\")\n);\n\nfunction App(): JSX.Element {\n  return (\n    <Router>\n      <Suspense fallback={<></>}>\n        <ScrollToTop />\n      </Suspense>\n      <Main>\n        <Routes />\n      </Main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n/* eslint-disable no-console */\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StrictMode } from \"react\";\nimport { hydrate, render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n// import reportWebVitals from './reportWebVitals';\n\nconst AppRoot = () => (\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\nconst rootElement = document.getElementById(\"root\");\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nif (rootElement!.hasChildNodes()) {\n  hydrate(<AppRoot />, rootElement);\n} else {\n  render(<AppRoot />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}